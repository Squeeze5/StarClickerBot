import { useEffect, useState } from 'react';
import { db } from '../db';
import './ShopScreen.css';

interface ShopScreenProps {
  userId: string;
}

const ShopScreen = ({ userId }: ShopScreenProps) => {
  const [hasVip, setHasVip] = useState(false);
  const [vipExpiryDate, setVipExpiryDate] = useState<number | null>(null);
  const [daysRemaining, setDaysRemaining] = useState(0);
  const [purchasing, setPurchasing] = useState(false);

  // Query user data
  const { data } = db.useQuery({
    users: {
      $: {
        where: { id: userId }
      }
    }
  });

  useEffect(() => {
    if (data?.users && data.users.length > 0) {
      const user = data.users[0];
      setHasVip(user.hasVip || false);
      setVipExpiryDate(user.vipExpiryDate || null);

      // Calculate days remaining
      if (user.vipExpiryDate) {
        const now = Date.now();
        const daysLeft = Math.max(0, Math.ceil((Number(user.vipExpiryDate) - now) / (1000 * 60 * 60 * 24)));
        setDaysRemaining(daysLeft);
      }
    }
  }, [data]);

  const handlePurchaseVIP = async () => {
    setPurchasing(true);

    try {
      // Telegram Stars payment
      const tg = window.Telegram?.WebApp;

      if (!tg) {
        alert('Telegram WebApp not available');
        setPurchasing(false);
        return;
      }

      // Create invoice for 199 Telegram Stars
      const invoice = {
        title: 'VIP Subscription',
        description: '30 days of VIP access with exclusive benefits!',
        payload: `vip_subscription_${userId}_${Date.now()}`,
        currency: 'XTR', // Telegram Stars currency code
        prices: [{ label: 'VIP Subscription (30 days)', amount: 199 }]
      };

      // Open invoice
      tg.openInvoice(
        // Invoice link will be generated by your backend
        // For now, we'll use a placeholder
        `https://your-backend.com/create-invoice?userId=${userId}`,
        (status: string) => {
          if (status === 'paid') {
            // Payment successful - activate VIP
            activateVIP();
          } else {
            console.log('Payment status:', status);
            setPurchasing(false);
            if (tg.HapticFeedback) {
              tg.HapticFeedback.notificationOccurred('error');
            }
          }
        }
      );
    } catch (error) {
      console.error('Error purchasing VIP:', error);
      setPurchasing(false);

      const tg = window.Telegram?.WebApp;
      if (tg?.HapticFeedback) {
        tg.HapticFeedback.notificationOccurred('error');
      }
    }
  };

  const activateVIP = async () => {
    try {
      const now = Date.now();
      const expiryDate = now + (30 * 24 * 60 * 60 * 1000); // 30 days from now

      await db.transact([
        db.tx.users[userId].update({
          hasVip: true,
          vipExpiryDate: expiryDate,
          daysBeforePaying: 30
        })
      ]);

      setHasVip(true);
      setVipExpiryDate(expiryDate);
      setDaysRemaining(30);
      setPurchasing(false);

      const tg = window.Telegram?.WebApp;
      if (tg?.HapticFeedback) {
        tg.HapticFeedback.notificationOccurred('success');
      }

      alert('VIP activated successfully! Enjoy your benefits! üåü');
    } catch (error) {
      console.error('Error activating VIP:', error);
      setPurchasing(false);
    }
  };

  const formatExpiryDate = (timestamp: number) => {
    return new Date(timestamp).toLocaleDateString('en-US', {
      month: 'long',
      day: 'numeric',
      year: 'numeric'
    });
  };

  return (
    <div className="shop-screen">
      <div className="shop-header">
        <h2 className="shop-title">Shop</h2>
        <p className="shop-subtitle">Unlock exclusive benefits</p>
      </div>

      <div className="vip-card">
        <div className="vip-header">
          <div className="vip-badge">VIP</div>
          <div className="vip-price">199 ‚≠ê</div>
        </div>

        <h3 className="vip-title">Premium Membership</h3>
        <p className="vip-description">
          Get 30 days of exclusive VIP benefits
        </p>

        <div className="vip-benefits">
          <div className="benefit-item">
            <span className="benefit-icon">‚ú®</span>
            <span className="benefit-text">VIP badge in leaderboard</span>
          </div>
          <div className="benefit-item">
            <span className="benefit-icon">üé®</span>
            <span className="benefit-text">Access to exclusive skins</span>
          </div>
          <div className="benefit-item">
            <span className="benefit-icon">‚ö°</span>
            <span className="benefit-text">2x click multiplier bonus</span>
          </div>
          <div className="benefit-item">
            <span className="benefit-icon">üèÜ</span>
            <span className="benefit-text">Priority support</span>
          </div>
        </div>

        {hasVip ? (
          <div className="vip-active">
            <div className="vip-status-badge">
              <span className="status-icon">‚úì</span>
              VIP Active
            </div>
            <p className="vip-expiry">
              {daysRemaining > 0 ? (
                <>
                  <strong>{daysRemaining}</strong> days remaining
                  <br />
                  <span className="expiry-date">
                    Expires: {vipExpiryDate && formatExpiryDate(vipExpiryDate)}
                  </span>
                </>
              ) : (
                <>Your VIP has expired. Renew now!</>
              )}
            </p>
            {daysRemaining === 0 && (
              <button
                className="vip-button renew"
                onClick={handlePurchaseVIP}
                disabled={purchasing}
              >
                {purchasing ? 'Processing...' : 'Renew VIP'}
              </button>
            )}
          </div>
        ) : (
          <button
            className="vip-button purchase"
            onClick={handlePurchaseVIP}
            disabled={purchasing}
          >
            {purchasing ? 'Processing...' : 'Purchase VIP'}
          </button>
        )}
      </div>

      <div className="shop-note">
        <p>
          <strong>Note:</strong> VIP subscription will automatically expire after 30 days.
          You can renew anytime to continue enjoying the benefits!
        </p>
      </div>
    </div>
  );
};

export default ShopScreen;
